<?php
defined('BASEPATH') OR exit('No direct script access allowed'); 
class Webservice extends MX_Controller {
 function __construct()    {        // Construct the parent class        parent::__construct();		     }
 public function index(){	$this->savelog('Invalid Url');	header('HTTP/1.0 403 Forbidden'); 	//echo 'You are forbidden!';	//die;}
	public function service($type_of_request='')
	{		/*foreach (getallheaders() as $name => $value) {    echo "$name: $value\n";}*/ 		 $allowed_types = array('purchases','issues','openingbalance','attendance');          $username = trim($this->input->get_request_header('username'));		$password =  trim($this->input->get_request_header('password'));		  		 if(strtolower($this->input->method())!="post")		 {			$this->savelog('Invalid Method');			header("HTTP/1.0 405 Method Not Allowed"); 			die;		 }		 if(  !in_array($type_of_request, $allowed_types))		{			$this->savelog('Invalid Url');			header("HTTP/1.0 404 Not Found"); 			die;		}		if($username == "" || $password ==""    )		{			$this->savelog('Header Parameters missing');						header('HTTP/1.0 400 Bad Request'); 			send_json_result([                'error_code' =>  400 ,                                'message' => 'Header Parameters missing'            ] ); // NOT_FOUND (404) being the HTTP response code		}				//Check access 		$user_access_rs = $this->db->query("select * from webservice_credentials where username=? and password=?",array($username,$password));		if($user_access_rs->num_rows()==0)		{			$this->savelog('Invalid credentials');			header('HTTP/1.0 401 Unauthorized Access'); 			send_json_result([                'error_code' =>  401 ,                 'message' => 'Access denied - invalid credentials - '.$this->input->ip_address()            ] );			die;		}		 		 						switch(trim($type_of_request))		{			case 'attendance':								$date =  trim($this->input->post('date'));								$this->validateDate($date);								$rset = $this->db->query("select 																sc.name as hostel_name,																sc.school_code as school_code, 																sa.present_count as present_count , 																sa.entry_date as entry_date  																from 																school_attendence sa inner join schools sc on sc.school_id = sa.school_id 																where sa.entry_date=?  and  sc.school_code !='85000'",array( $date));								$results = array();								$sno =1 ;									foreach($rset->result() as $row)									{										$row->sno = $sno;										 										$results[] = $row;										$sno++;									}			break;										 				case 'issues':								$date =  trim($this->input->post('date'));								$this->validateDate($date);								$rset = $this->db->query("select 																sc.name as hostel_name,																sc.school_code as school_code,																it.item_name as item_name, 																entry_date as issue_date, 																opening_quantity as opening_balance  ,																 purchase_biil_no as purchase_biil_no, 																purchase_quantity as purchase_quantity,																TRUNCATE(purchase_price ,2) as purchase_rate, 																TRUNCATE((purchase_quantity * purchase_price),2) as total_purchased_amount, 																																(session_1_qty+session_2_qty+session_3_qty+session_4_qty) as issued_quantity, TRUNCATE((session_1_qty*session_1_price+session_2_qty*session_2_price+session_3_qty*session_3_price+session_4_qty*session_4_price),2) as total_consumed_amount  ,																closing_quantity closing_balance																from 																balance_sheet bs inner join schools sc on sc.school_id = bs.school_id 																inner join items it on it.item_id = bs.item_id where bs.entry_date=? and (session_1_qty+session_2_qty+session_3_qty+session_4_qty)>0  and school_code !='85000'",array( $date));								 //echo $this->db->last_query();								$results = array();								$sno =1 ;									foreach($rset->result() as $row)									{										$row->sno = $sno;										 										$issue_rate = $row->total_consumed_amount/$row->issued_quantity ;										 $row->rate = number_format((float)$issue_rate, 2, '.', '');  										$results[] = $row;										$sno++;									} 						break;						 								default:$this->savelog('Invalid Url');						break; 		}				$response_results= json_encode($results);		 		$this->savelog('Response sent',$response_results);		send_json_result($results); 	}			private function savelog($permited = '',$response_results)	{		$params['posted_data'] = $_POST;		$params['username'] = $this->input->get_request_header("username");		$params['password'] = $this->input->get_request_header("password");				$insert_data = array('url_accessed'=>current_url(),							'parameters'=>serialize($params),							'response'=>$permited,							'response_results'=>$response_results,							'ip_address'=>$this->input->ip_address()							);		$this->db->insert("webservice_logs",$insert_data);					}	private function validateDate($date, $format = 'Y-m-d')	{		 		$d = DateTime::createFromFormat($format, $date);		// The Y ( 4 digits year ) returns TRUE for any integer with any number of digits so changing the comparison from == to === fixes the issue.		$flag = $d && $d->format($format) === $date;		if(!$flag)		{					$this->savelog('Invalid Date format');			header('HTTP/1.0 400 Bad Request'); 			send_json_result([                'error_code' =>  400 ,                                'message' => 'Invalid Date format'            ] );		}	}	 
}
